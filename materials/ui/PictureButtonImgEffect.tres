[gd_resource type="ShaderMaterial" load_steps=26 format=2]

[ext_resource path="res://addons/shaderV/uv/rotate.gd" type="Script" id=1]
[ext_resource path="res://addons/shaderV/rgba/generate_shapes/generateRect.gd" type="Script" id=2]
[ext_resource path="res://addons/shaderV/uv/transformUV.gd" type="Script" id=3]
[ext_resource path="res://addons/shaderV/rgba/maskAlpha.gd" type="Script" id=4]
[ext_resource path="res://textures/ui/PictureButtonEffectH.tres" type="Texture" id=5]
[ext_resource path="res://textures/ui/PictureButtonEffectV.tres" type="Texture" id=6]

[sub_resource type="VisualShaderNodeCustom" id=1]
default_input_values = [ 1, 1, 2, 1 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "Gradient"
texture_type = 1

[sub_resource type="VisualShaderNodeCustom" id=3]
default_input_values = [ 1, 1, 2, 1 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTextureUniform" id=4]
uniform_name = "GradientV"

[sub_resource type="VisualShaderNodeCustom" id=5]
default_input_values = [ 1, 1, 2, 1 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeCustom" id=6]
default_input_values = [ 1, 0.0, 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
default_input_values = [ 0, 90.0 ]
function = 27

[sub_resource type="VisualShaderNodeCustom" id=8]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, Vector3( 1, 1, 0 ), 3, Vector3( 0.5, 0.5, 0 ), 4, 0, 5, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeCustom" id=9]
output_port_for_preview = 1
default_input_values = [ 1, Vector3( 0.5, 0.5, 0 ), 2, Vector3( 0.5, 0.5, 0 ), 3, Vector3( 1, 1, 1 ), 4, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeVec3Uniform" id=10]
uniform_name = "Offset"

[sub_resource type="VisualShaderNodeVec3Uniform" id=11]
uniform_name = "Scale"

[sub_resource type="VisualShaderNodeVec3Uniform" id=12]
uniform_name = "ScalePivot"

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "Rotation"

[sub_resource type="VisualShaderNodeVec3Uniform" id=14]
uniform_name = "RotationPivot"

[sub_resource type="VisualShaderNodeInput" id=15]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=16]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=17]
source = 5

[sub_resource type="VisualShaderNodeCustom" id=18]
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, Vector3( 1, 1, 0 ), 3, Vector3( 0.5, 0.5, 0 ), 4, 0, 5, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 3 )

[sub_resource type="VisualShader" id=19]
code = "shader_type canvas_item;
uniform vec3 Offset;
uniform vec3 Scale;
uniform vec3 ScalePivot;
uniform float Rotation;
uniform vec3 RotationPivot;
uniform sampler2D Gradient : hint_albedo;
uniform sampler2D GradientV;


// TransformUV

vec2 transformUVFunc(vec2 _uv_transform, vec2 _scale_uv_, vec2 _pivot_scale_uv_, vec2 _offset_uv_, float _rotate_uv, vec2 _pivot_rotate_uv_){
	_uv_transform -= _offset_uv_; // offset
	_uv_transform = (_uv_transform - _pivot_scale_uv_) * _scale_uv_ + _pivot_scale_uv_; // zoom
	vec2 _rot_uv_angl = vec2(cos(_rotate_uv), sin(_rotate_uv));
	mat2 _rot_matrix = mat2(vec2(_rot_uv_angl.x, - _rot_uv_angl.y), vec2(_rot_uv_angl.y, _rot_uv_angl.x));
	_uv_transform = (_uv_transform - _pivot_rotate_uv_) * _rot_matrix + _pivot_rotate_uv_; // rotate
	return _uv_transform;
}

// RectShape

float rectCreati0nFunc(vec2 _uv_rect_generate, vec2 _pos_rect_generate, vec2 _size_rect_generate){
	vec2 sw_rect_gen = _pos_rect_generate - _size_rect_generate / 2.0;
	vec2 ne_rect_gen = _pos_rect_generate + _size_rect_generate / 2.0;
	vec2 _pct_temp_var = step(sw_rect_gen, _uv_rect_generate);
	_pct_temp_var -= step(ne_rect_gen, _uv_rect_generate);
	return _pct_temp_var.x * _pct_temp_var.y;
}

// MaskAlpha

vec4 maskAlphaFunc(vec4 _col_to_mask, float _mask_alpha_to_mask){
	return vec4(_col_to_mask.rgb, _col_to_mask.a * _mask_alpha_to_mask);
}

// RotateUV

vec3 r0tateUVFunc(vec3 _uv_r0tate, vec2 _pivot_r0tate, float _r0tation_r0tate){
	//_r0tation_r0tate = radians(_r0tationDeg_r0tate);
	vec2 _r0tAngle = vec2(cos(_r0tation_r0tate), sin(_r0tation_r0tate));
	_uv_r0tate.xy -= _pivot_r0tate;
	_uv_r0tate.xy = vec2((_uv_r0tate.x*_r0tAngle.x-_uv_r0tate.y*_r0tAngle.y),(_uv_r0tate.x*_r0tAngle.y+_uv_r0tate.y*_r0tAngle.x));
	_uv_r0tate.xy += _pivot_r0tate;
	return _uv_r0tate;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorUniform:20
	vec3 n_out20p0 = Offset;

// VectorUniform:21
	vec3 n_out21p0 = Scale;

// VectorUniform:22
	vec3 n_out22p0 = ScalePivot;

// ScalarUniform:23
	float n_out23p0 = Rotation;

// VectorUniform:24
	vec3 n_out24p0 = RotationPivot;

// TransformUV:19
	vec3 n_out19p0;
	{
		n_out19p0.xy = transformUVFunc(n_out3p0.xy, n_out21p0.xy, n_out22p0.xy, n_out20p0.xy, n_out23p0, n_out24p0.xy);
	}

// Input:4

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out19p0.xy);
		n_out6p0 = TEXTURE_tex_read.rgb;
		n_out6p1 = TEXTURE_tex_read.a;
	}

// TransformUV:9
	vec3 n_in9p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in9p2 = vec3(1.00000, 1.00000, 0.00000);
	vec3 n_in9p3 = vec3(0.50000, 0.50000, 0.00000);
	float n_in9p4 = 0.00000;
	vec3 n_in9p5 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out9p0;
	{
		n_out9p0.xy = transformUVFunc(n_out3p0.xy, n_in9p2.xy, n_in9p3.xy, n_in9p1.xy, n_in9p4, n_in9p5.xy);
	}

// RectShape:2
	vec3 n_in2p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p2 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in2p3 = vec3(1.00000, 1.00000, 1.00000);
	float n_in2p4 = 1.00000;
	vec3 n_out2p0;
	float n_out2p1;
	{
		n_out2p0 = n_in2p3;
		n_out2p1 = rectCreati0nFunc(n_out9p0.xy, n_in2p1.xy, n_in2p2.xy) * n_in2p4;
	}

// MaskAlpha:11
	float n_in11p1 = 1.00000;
	vec3 n_out11p0;
	float n_out11p1;
	{
		n_out11p0 = maskAlphaFunc(vec4(n_out6p0, n_in11p1), n_out2p1).rgb;
		n_out11p1 = maskAlphaFunc(vec4(n_out6p0, n_in11p1), n_out2p1).a;
	}

// TextureUniform:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 n_tex_read = texture(Gradient, n_out9p0.xy);
		n_out13p0 = n_tex_read.rgb;
		n_out13p1 = n_tex_read.a;
	}

// MaskAlpha:14
	float n_in14p1 = 1.00000;
	vec3 n_out14p0;
	float n_out14p1;
	{
		n_out14p0 = maskAlphaFunc(vec4(vec3(n_out11p1), n_in14p1), n_out13p1).rgb;
		n_out14p1 = maskAlphaFunc(vec4(vec3(n_out11p1), n_in14p1), n_out13p1).a;
	}

// ScalarFunc:18
	float n_in18p0 = 90.00000;
	float n_out18p0 = radians(n_in18p0);

// RotateUV:17
	vec3 n_in17p2 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_out17p0;
	{
		n_out17p0 = r0tateUVFunc(n_out9p0, n_in17p2.xy, n_out18p0);
	}

// TextureUniform:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 n_tex_read = texture(GradientV, n_out17p0.xy);
		n_out15p0 = n_tex_read.rgb;
		n_out15p1 = n_tex_read.a;
	}

// MaskAlpha:16
	float n_in16p1 = 1.00000;
	vec3 n_out16p0;
	float n_out16p1;
	{
		n_out16p0 = maskAlphaFunc(vec4(vec3(n_out14p1), n_in16p1), n_out15p1).rgb;
		n_out16p1 = maskAlphaFunc(vec4(vec3(n_out14p1), n_in16p1), n_out15p1).a;
	}

// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out16p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -425, 114 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 700, 100 )
nodes/fragment/2/node = SubResource( 9 )
nodes/fragment/2/position = Vector2( 140, 120 )
nodes/fragment/3/node = SubResource( 15 )
nodes/fragment/3/position = Vector2( -196, -26 )
nodes/fragment/4/node = SubResource( 16 )
nodes/fragment/4/position = Vector2( 0, -20 )
nodes/fragment/6/node = SubResource( 17 )
nodes/fragment/6/position = Vector2( 240, -20 )
nodes/fragment/9/node = SubResource( 18 )
nodes/fragment/9/position = Vector2( -160, 80 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 440, 100 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( -140, 300 )
nodes/fragment/14/node = SubResource( 3 )
nodes/fragment/14/position = Vector2( 440, 240 )
nodes/fragment/15/node = SubResource( 4 )
nodes/fragment/15/position = Vector2( -140, 480 )
nodes/fragment/16/node = SubResource( 5 )
nodes/fragment/16/position = Vector2( 440, 360 )
nodes/fragment/17/node = SubResource( 6 )
nodes/fragment/17/position = Vector2( -360, 480 )
nodes/fragment/18/node = SubResource( 7 )
nodes/fragment/18/position = Vector2( -480, 380 )
nodes/fragment/19/node = SubResource( 8 )
nodes/fragment/19/position = Vector2( -440, 80 )
nodes/fragment/20/node = SubResource( 10 )
nodes/fragment/20/position = Vector2( -760, 80 )
nodes/fragment/21/node = SubResource( 11 )
nodes/fragment/21/position = Vector2( -760, 140 )
nodes/fragment/22/node = SubResource( 12 )
nodes/fragment/22/position = Vector2( -760, 200 )
nodes/fragment/23/node = SubResource( 13 )
nodes/fragment/23/position = Vector2( -760, 260 )
nodes/fragment/24/node = SubResource( 14 )
nodes/fragment/24/position = Vector2( -760, 320 )
nodes/fragment/connections = PoolIntArray( 4, 0, 6, 2, 3, 0, 9, 0, 9, 0, 2, 0, 6, 0, 11, 0, 2, 1, 11, 2, 11, 1, 14, 0, 11, 0, 0, 0, 13, 1, 14, 2, 9, 0, 13, 0, 14, 1, 16, 0, 16, 1, 0, 1, 9, 0, 17, 0, 18, 0, 17, 1, 17, 0, 15, 0, 15, 1, 16, 2, 3, 0, 19, 0, 19, 0, 6, 0, 20, 0, 19, 1, 22, 0, 19, 3, 23, 0, 19, 4, 24, 0, 19, 5, 21, 0, 19, 2 )

[resource]
shader = SubResource( 19 )
shader_param/Offset = Vector3( 0, -0.14, 0 )
shader_param/Scale = Vector3( 1, 1, 0 )
shader_param/ScalePivot = Vector3( 0.5, 0.5, 0 )
shader_param/Rotation = 0.0
shader_param/RotationPivot = Vector3( 0.5, 0.5, 0 )
shader_param/Gradient = ExtResource( 5 )
shader_param/GradientV = ExtResource( 6 )

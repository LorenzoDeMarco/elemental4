[gd_resource type="ShaderMaterial" load_steps=21 format=2]

[ext_resource path="res://addons/shaderV/rgba/noise/simplex4d.gd" type="Script" id=2]
[ext_resource path="res://addons/shaderV/uv/animated/rotateAnimated.gd" type="Script" id=3]
[ext_resource path="res://addons/shaderV/rgba/blendAwithB.gd" type="Script" id=4]
[ext_resource path="res://addons/visual_shader_node_library/shader_nodes/common/rotation_2d.gd" type="Script" id=5]
[ext_resource path="res://addons/shaderV/uv/pixelate.gd" type="Script" id=6]
[ext_resource path="res://addons/shaderV/tools/TimeScaled.gd" type="Script" id=7]

[sub_resource type="VisualShaderNodeCustom" id=1]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeCustom" id=2]
default_input_values = [ 0, 0.0005 ]
script = ExtResource( 7 )

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0.0810443, 0.0850893, 0.394531, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=4]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeCustom" id=5]
default_input_values = [ 1, 1.0, 3, 1.0, 4, 0.01 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeCustom" id=6]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1, 4, 0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeCustom" id=7]
default_input_values = [ 0, 1.0 ]
script = ExtResource( 7 )

[sub_resource type="VisualShaderNodeColorOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.3, 0.3, 0.3 ) ]
operator = 6

[sub_resource type="VisualShaderNodeCustom" id=9]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1, 4, 0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=11]
default_input_values = [ 1, Vector3( 64, 64, 0 ) ]
script = ExtResource( 6 )

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "time"

[sub_resource type="VisualShaderNodeCustom" id=13]
default_input_values = [ 1, 0.02, 2, Vector3( 0.5, 0.5, 0 ) ]
script = ExtResource( 3 )

[sub_resource type="VisualShader" id=14]
code = "shader_type canvas_item;


// Rotation2D

void rotation_2d(float angle, vec3 pivot, in vec3 position_in,  out vec3 position_out) {
	mat2 rotation_matrix = mat2( vec2(cos(angle), -sin(angle)), vec2(sin(angle), cos(angle)));
	position_in -= pivot;
	position_out.xy = rotation_matrix * position_in.xy;
	position_out.z = position_in.z;
	position_out += pivot;
	
}
// RotateUVAnimated

vec2 r0tateUVAnimatedFunc(vec2 _uv_r0tate, vec2 _pivot_r0tate, float _r0tation_r0tate, float _r0tSpeed_r0tate, float _t1me_r0tate){
	_r0tation_r0tate += _t1me_r0tate * _r0tSpeed_r0tate;
	//_r0tation_r0tate = radians(_r0tationDeg_r0tate);
	vec2 _r0tAngle = vec2(cos(_r0tation_r0tate), sin(_r0tation_r0tate));
	_uv_r0tate -= _pivot_r0tate;
	_uv_r0tate = vec2((_uv_r0tate.x*_r0tAngle.x-_uv_r0tate.y*_r0tAngle.y),(_uv_r0tate.x*_r0tAngle.y+_uv_r0tate.y*_r0tAngle.x));
	_uv_r0tate += _pivot_r0tate;
	return _uv_r0tate;
}

// PixelateUV

vec2 pixelateFunc(vec2 _uv_p1xelate, vec2 _effect_factor_p1xelate){
	return round(_uv_p1xelate * _effect_factor_p1xelate) / _effect_factor_p1xelate;
}

// SimplexNoise4D

vec4 _permute_4_s4_n0ise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float _permute_s4_n0ise(float x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
vec4 _grad4_s4_n0ise(float j, vec4 ip) {
	vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);
	vec4 p, s;
	p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;
	p.w = 1.5 - dot(abs(p.xyz), ones.xyz);
	s = vec4(lessThan(p, vec4(0.0)));
	p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; 
	return p;
}
float simplex4dN0iseFunc(vec4 v) {
	vec4 C = vec4( 0.138196601125011,
				0.276393202250021,
				0.414589803375032,
				-0.447213595499958);
	
	vec4 i  = floor(v + dot(v, vec4(0.309016994374947451)) );
	vec4 x0 = v -   i + dot(i, C.xxxx);
	
	vec4 i0;
	vec3 isX = step( x0.yzw, x0.xxx );
	vec3 isYZ = step( x0.zww, x0.yyz );
	i0.x = isX.x + isX.y + isX.z;
	i0.yzw = 1.0 - isX;
	i0.y += isYZ.x + isYZ.y;
	i0.zw += 1.0 - isYZ.xy;
	i0.z += isYZ.z;
	i0.w += 1.0 - isYZ.z;
	
	vec4 i3 = clamp( i0, 0.0, 1.0 );
	vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );
	vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );
	
	vec4 x1 = x0 - i1 + C.xxxx;
	vec4 x2 = x0 - i2 + C.yyyy;
	vec4 x3 = x0 - i3 + C.zzzz;
	vec4 x4 = x0 + C.wwww;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	float j0 = _permute_s4_n0ise( _permute_s4_n0ise( _permute_s4_n0ise( _permute_s4_n0ise(i.w) + i.z) + i.y) + i.x);
	vec4 j1 = _permute_4_s4_n0ise( _permute_4_s4_n0ise( _permute_4_s4_n0ise( _permute_4_s4_n0ise (
				i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))
				+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))
				+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))
				+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));
	
	vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;
	
	vec4 p0 = _grad4_s4_n0ise(j0,   ip);
	vec4 p1 = _grad4_s4_n0ise(j1.x, ip);
	vec4 p2 = _grad4_s4_n0ise(j1.y, ip);
	vec4 p3 = _grad4_s4_n0ise(j1.z, ip);
	vec4 p4 = _grad4_s4_n0ise(j1.w, ip);
	
	vec4 norm = 2.79284291400159 - 1.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	p4 *= 2.79284291400159 - 1.85373472095314 * dot(p4,p4);
	
	vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), vec3(0.0));
	vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)), vec2(0.0));
	m0 = m0 * m0;
	m1 = m1 * m1;
	return 33.0 *(dot(m0*m0, vec3(dot(p0, x0), dot(p1, x1), dot(p2, x2)))
				+ dot(m1*m1, vec2(dot(p3, x3), dot(p4, x4))));
}

// BlendAwithB

vec4 blendAwithBFunc(vec4 _c0l0r_blendA_rgba, vec4 _c0l0r_blendB_rgba, float _fade_blend_c0l0r){
	return mix(_c0l0r_blendA_rgba, _c0l0r_blendB_rgba, _c0l0r_blendB_rgba.a * _fade_blend_c0l0r);
}


void vertex() {
// Output:0

}

void fragment() {
// Color:19
	vec3 n_out19p0 = vec3(0.081044, 0.085089, 0.394531);
	float n_out19p1 = 1.000000;

// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// ScaledTIME:17
	float n_in17p0 = 0.00050;
	float n_out17p0;
	{
		n_out17p0 = n_in17p0 * TIME;
	}

// Rotation2D:16
	vec3 n_out16p0;
	{
		rotation_2d(n_out17p0, vec3(0.0, 0.0, 0.0), vec3(n_out17p0), n_out16p0);
	}

// Input:7
	float n_out7p0 = TIME;

// RotateUVAnimated:8
	float n_in8p1 = 0.02000;
	vec3 n_out8p0;
	{
		n_out8p0 = vec3(r0tateUVAnimatedFunc(n_out4p0.xy, n_out16p0.xy, 0.0, n_in8p1, n_out7p0), 0);
	}

// PixelateUV:5
	vec3 n_in5p1 = vec3(64.00000, 64.00000, 0.00000);
	vec3 n_out5p0;
	{
		n_out5p0.xy = pixelateFunc(n_out8p0.xy, n_in5p1.xy);
	}

// SimplexNoise4D:39
	float n_in39p2 = 5.00000;
	float n_in39p3 = 1.00000;
	float n_out39p0;
	{
		n_out39p0 = simplex4dN0iseFunc(vec4((n_out5p0.xy + n_out16p0.xy) * n_in39p2, n_in39p3, n_out17p0));
	}

// VectorOp:20
	vec3 n_out20p0 = n_out19p0 * vec3(n_out39p0);

// ScaledTIME:34
	float n_in34p0 = 1.00000;
	float n_out34p0;
	{
		n_out34p0 = n_in34p0 * TIME;
	}

// SimplexNoise4D:33
	vec3 n_in33p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in33p2 = 5.00000;
	float n_in33p3 = 1.00000;
	float n_out33p0;
	{
		n_out33p0 = simplex4dN0iseFunc(vec4((n_out4p0.xy + n_in33p1.xy) * n_in33p2, n_in33p3, n_out34p0));
	}

// ColorOp:37
	vec3 n_in37p1 = vec3(0.30000, 0.30000, 0.30000);
	vec3 n_out37p0 = vec3(1.0) - (vec3(1.0) - vec3(n_out33p0)) / (n_in37p1);

// BlendAwithB:29
	float n_in29p1 = 1.00000;
	float n_in29p3 = 1.00000;
	float n_in29p4 = 0.01000;
	vec3 n_out29p0;
	float n_out29p1;
	{
		vec4 n_out29p0n_out29p1 = blendAwithBFunc(vec4(n_out20p0, n_in29p1), vec4(n_out37p0, n_in29p3), n_in29p4);
		n_out29p0 = n_out29p0n_out29p1.rgb;
		n_out29p1 = n_out29p0n_out29p1.a;
	}

// Output:0
	COLOR.rgb = n_out29p0;
	COLOR.a = n_out29p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 1851, -5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2720, 80 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( -260, 140 )
nodes/fragment/5/node = SubResource( 11 )
nodes/fragment/5/position = Vector2( 480, 120 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( -260, 240 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( 220, 120 )
nodes/fragment/16/node = SubResource( 1 )
nodes/fragment/16/position = Vector2( -20, 320 )
nodes/fragment/17/node = SubResource( 2 )
nodes/fragment/17/position = Vector2( -260, 320 )
nodes/fragment/19/node = SubResource( 3 )
nodes/fragment/19/position = Vector2( 720, 20 )
nodes/fragment/20/node = SubResource( 4 )
nodes/fragment/20/position = Vector2( 880, 60 )
nodes/fragment/29/node = SubResource( 5 )
nodes/fragment/29/position = Vector2( 2100, 80 )
nodes/fragment/33/node = SubResource( 6 )
nodes/fragment/33/position = Vector2( 1120, 460 )
nodes/fragment/34/node = SubResource( 7 )
nodes/fragment/34/position = Vector2( 620, 640 )
nodes/fragment/37/node = SubResource( 8 )
nodes/fragment/37/position = Vector2( 1520, 480 )
nodes/fragment/39/node = SubResource( 9 )
nodes/fragment/39/position = Vector2( 680, 140 )
nodes/fragment/connections = PoolIntArray( 7, 0, 8, 3, 8, 0, 5, 0, 16, 0, 8, 2, 17, 0, 16, 2, 17, 0, 16, 0, 19, 0, 20, 0, 4, 0, 33, 0, 34, 0, 33, 4, 33, 0, 37, 0, 29, 1, 0, 1, 20, 0, 29, 0, 4, 0, 8, 0, 37, 0, 29, 2, 29, 0, 0, 0, 16, 0, 39, 1, 5, 0, 39, 0, 17, 0, 39, 4, 39, 0, 20, 1 )

[resource]
shader = SubResource( 14 )

[gd_scene load_steps=9 format=2]

[ext_resource path="res://fonts/presets/Heading1.tres" type="DynamicFont" id=2]
[ext_resource path="res://fonts/presets/Heading2.tres" type="DynamicFont" id=3]
[ext_resource path="res://prefabs/ui/Element.tscn" type="PackedScene" id=4]
[ext_resource path="res://prefabs/ui/Button.tscn" type="PackedScene" id=7]
[ext_resource path="res://themes/Default.theme" type="Theme" id=8]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

export var formula_input_ids : Array = []

var new_elem_model : ElementModel = ElementModel.new(-1, \"\", Color.gray, \"\")
var output_elem_id : int = -1
var _is_new_elem : bool = false

# Called when the node enters the scene tree for the first time.
func _ready():
	$Panel/ResultPanel/TabContainer/TabNew/ResultPreview.model_override = new_elem_model
	$Panel/ResultPanel/TabContainer/TabNew/ResultPreview.update_element_display()
	_on_newelement_toggled(false)
	var es = preload(\"res://prefabs/ui/Element.tscn\")
	for id in formula_input_ids:
		var e = es.instance()
		e.element_id = id
		e.rect_min_size = Vector2(70, 70)
		e.can_be_dragged = false
		e.is_slot = false
		e.animate = false
		$Panel/InputsScroll/InputsHContainer.add_child(e)


func _on_newelement_toggled(button_pressed: bool) -> void:
	_is_new_elem = button_pressed
	$Panel/ResultPanel/TabContainer.set_current_tab(1 if button_pressed else 0)

func _on_newelem_name_changed(new_text: String):
	new_elem_model.name = new_text
	$Panel/ResultPanel/TabContainer/TabNew/ResultPreview.model_override = new_elem_model
	$Panel/ResultPanel/TabContainer/TabNew/ResultPreview.update_element_display()

func _on_newelem_mark_changed(new_text: String):
	new_elem_model.mark = new_text

func _on_newelem_color_changed(value: Color):
	new_elem_model.color = value
	$Panel/ResultPanel/TabContainer/TabNew/ResultPreview.model_override = new_elem_model
	$Panel/ResultPanel/TabContainer/TabNew/ResultPreview.update_element_display()

func bake_request_object():
	var tmp : Dictionary = {
		\"pack_id\": ElementDB.get_pack_name(),
		\"inputs\": formula_input_ids,
	}
	if _is_new_elem: 
		tmp['output_new'] = new_elem_model.to_dto()
	else: 
		tmp['output_id'] = output_elem_id
	return tmp

func _on_cancel_pressed():
	queue_free()

func _on_suggest_response(response: HTTPUtil.Response):
	if response.response_code != HTTPClient.RESPONSE_OK:
		Globals.add_notification(\"Whoops!\", \"An error has occurred. Please retry later.\")
	else:
		Globals.add_notification(\"Success!\", \"Your suggestion has been saved.\")
		queue_free()

func _suggest(internet: bool):
	if internet:
		HTTPUtil.request(funcref(self, \"_on_suggest_response\"), \\
			HTTPClient.METHOD_POST, Globals.PRIMARY_SERVER_URL + \"/api/universe/formulas\", \\
			[\"Content-Type: application/json\"], \\
			JSON.print(bake_request_object()))
	else:
		Globals.add_notification(\"To suggest formulas, you must connect to the Internet.\", \"Please retry later.\")

func _on_confirm_pressed():
	Globals.connect(\"internet_status_changed\", self, \"_suggest\", [], CONNECT_ONESHOT)
	Globals.check_internet(true)
"

[sub_resource type="StyleBoxEmpty" id=2]

[sub_resource type="StyleBoxEmpty" id=3]

[node name="SuggestFormulaOverlay" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
theme = ExtResource( 8 )
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -256.0
margin_top = -237.5
margin_right = 256.0
margin_bottom = 237.5
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="Title" type="Label" parent="Panel"]
anchor_right = 1.0
margin_bottom = 44.0
custom_fonts/font = ExtResource( 2 )
text = "Suggest a new formula!"
align = 1
__meta__ = {
"_edit_lock_": true
}

[node name="InputsScroll" type="ScrollContainer" parent="Panel"]
anchor_right = 1.0
margin_left = 8.0
margin_top = 132.0
margin_right = -8.0
margin_bottom = 206.0
scroll_vertical_enabled = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="InputsHContainer" type="HBoxContainer" parent="Panel/InputsScroll"]
margin_right = 140.0
margin_bottom = 70.0
rect_min_size = Vector2( 140, 70 )

[node name="MixingLbl" type="Label" parent="Panel"]
anchor_right = 1.0
margin_left = 8.0
margin_top = 76.0
margin_right = -8.0
margin_bottom = 124.0
custom_fonts/font = ExtResource( 3 )
text = "Mixing these elements..."
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ResultLbl" type="Label" parent="Panel"]
anchor_right = 1.0
margin_left = 8.0
margin_top = 214.0
margin_right = -8.0
margin_bottom = 262.0
custom_fonts/font = ExtResource( 3 )
text = "...should result in:"
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ResultPanel" type="Panel" parent="Panel"]
anchor_right = 1.0
margin_left = 8.0
margin_top = 262.0
margin_right = -8.0
margin_bottom = 427.0
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="CheckButton" type="CheckButton" parent="Panel/ResultPanel"]
anchor_right = 1.0
margin_left = 8.0
margin_top = 8.0
margin_right = -8.0
margin_bottom = 48.0
text = "Create new element"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TabContainer" type="TabContainer" parent="Panel/ResultPanel"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_top = -112.0
custom_styles/panel = SubResource( 2 )
tabs_visible = false
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="TabExisting" type="Panel" parent="Panel/ResultPanel/TabContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
custom_styles/panel = SubResource( 3 )
__meta__ = {
"_edit_lock_": true
}

[node name="ResultPreview" parent="Panel/ResultPanel/TabContainer/TabExisting" instance=ExtResource( 4 )]
margin_left = 8.0
margin_top = 8.0
margin_right = 104.0
margin_bottom = 104.0
can_be_dragged = false
animate = false

[node name="TabNew" type="Panel" parent="Panel/ResultPanel/TabContainer"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
custom_styles/panel = SubResource( 3 )
__meta__ = {
"_edit_lock_": true
}

[node name="ResultPreview" parent="Panel/ResultPanel/TabContainer/TabNew" instance=ExtResource( 4 )]
margin_left = 8.0
margin_top = 8.0
margin_right = 104.0
margin_bottom = 104.0
can_be_dragged = false
animate = false

[node name="TxtResultMark" type="LineEdit" parent="Panel/ResultPanel/TabContainer/TabNew"]
anchor_right = 1.0
margin_left = 112.0
margin_top = 56.0
margin_right = -8.0
margin_bottom = 87.0
max_length = 550
clear_button_enabled = true
placeholder_text = "Enter your mark here or leave empty."
caret_blink = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TxtResultName" type="LineEdit" parent="Panel/ResultPanel/TabContainer/TabNew"]
anchor_right = 1.0
margin_left = 112.0
margin_top = 8.0
margin_right = -56.0
margin_bottom = 48.0
max_length = 150
context_menu_enabled = false
clear_button_enabled = true
placeholder_text = "Element name"
caret_blink = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ColorPickerButton" type="ColorPickerButton" parent="Panel/ResultPanel/TabContainer/TabNew"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -48.0
margin_top = 8.0
margin_right = -8.0
margin_bottom = 48.0
color = Color( 0, 0.501961, 0.501961, 1 )
edit_alpha = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Confirm" parent="Panel" instance=ExtResource( 7 )]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -128.0
margin_top = -38.0
margin_right = -8.0
margin_bottom = -8.0
text = "Confirm"

[node name="Cancel" parent="Panel" instance=ExtResource( 7 )]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = -38.0
margin_right = 128.0
margin_bottom = -8.0
text = "Cancel"
[connection signal="toggled" from="Panel/ResultPanel/CheckButton" to="." method="_on_newelement_toggled"]
[connection signal="text_changed" from="Panel/ResultPanel/TabContainer/TabNew/TxtResultMark" to="." method="_on_newelem_mark_changed"]
[connection signal="text_changed" from="Panel/ResultPanel/TabContainer/TabNew/TxtResultName" to="." method="_on_newelem_name_changed"]
[connection signal="color_changed" from="Panel/ResultPanel/TabContainer/TabNew/ColorPickerButton" to="." method="_on_newelem_color_changed"]
[connection signal="pressed" from="Panel/Confirm" to="." method="_on_confirm_pressed" flags=3]
[connection signal="pressed" from="Panel/Cancel" to="." method="_on_cancel_pressed"]

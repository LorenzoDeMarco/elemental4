[gd_scene load_steps=27 format=2]

[ext_resource path="res://prefabs/classicGame/InventoryDropzoneClassic.tscn" type="PackedScene" id=1]
[ext_resource path="res://fonts/equivalent/EQUIVALENT.ttf" type="DynamicFontData" id=2]
[ext_resource path="res://prefabs/ui/ElemSquareUI.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/ui/arrow_white.png" type="Texture" id=4]
[ext_resource path="res://addons/shaderV/rgba/gradient4corners.gd" type="Script" id=5]
[ext_resource path="res://addons/shaderV/rgba/noise/simplex2d.gd" type="Script" id=6]
[ext_resource path="res://addons/shaderV/rgba/fireFX.gd" type="Script" id=7]

[sub_resource type="VisualShaderNodeColorUniform" id=2]
uniform_name = "NoiseColor"

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "FireCoeff"

[sub_resource type="VisualShaderNodeScalarInterp" id=13]

[sub_resource type="VisualShaderNodeCustom" id=14]
default_input_values = [ 1, Vector3( 0, 1, 0 ), 2, 0.3, 3, Vector3( 1, 1, 0 ), 4, 1.0, 5, Vector3( 1, 0.5, 0 ), 6, 1.0, 7, Vector3( 1, 0, 0 ), 8, 1.0, 9, 0, 10, 0.4, 11, 0.2, 12, 0.0 ]
script = ExtResource( 7 )

[sub_resource type="VisualShaderNodeScalarOp" id=15]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "Speed"

[sub_resource type="VisualShaderNodeColorUniform" id=17]
uniform_name = "FireColor1"

[sub_resource type="VisualShaderNodeColorUniform" id=18]
uniform_name = "FireColor2"

[sub_resource type="VisualShaderNodeCustom" id=19]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5 ]
script = ExtResource( 6 )

[sub_resource type="VisualShaderNodeVectorOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id=3]
default_input_values = [ 1, Vector3( 1, 1, 1 ), 2, 1.0, 3, Vector3( 1, 1, 1 ), 4, 1.0, 5, Vector3( 1, 1, 1 ), 6, 1.0, 7, Vector3( 1, 1, 1 ), 8, 1.0 ]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarInterp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 8.0 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=9]
operator = 2

[sub_resource type="VisualShader" id=10]
code = "shader_type canvas_item;
uniform vec4 NoiseColor : hint_color;
uniform float Speed;
uniform vec4 FireColor1 : hint_color;
uniform vec4 FireColor2 : hint_color;
uniform float FireCoeff;


// Gradient4Corners

vec4 gradient4cornersFunc(vec2 _uv_c0rner, vec4 _top_left_c0rner, vec4 _top_right_c0rner, vec4 _bottom_left_c0rner, vec4 _bottom_right_c0rner){
	vec4 _c0l0r_t0p_c0rner = mix(_top_left_c0rner, _top_right_c0rner, _uv_c0rner.x);
	vec4 _c0l0r_b0tt0m_c0rner = mix(_bottom_left_c0rner, _bottom_right_c0rner, _uv_c0rner.x);
	return mix(_c0l0r_t0p_c0rner, _c0l0r_b0tt0m_c0rner, _uv_c0rner.y);
}

// FireFX

float cnoiseFireFXTempFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	ix = ((ix*34.0)+1.0)*ix - floor(((ix*34.0)+1.0)*ix * (1.0 / 289.0)) * 289.0;
	vec4 ixy = (((ix + iy)*34.0)+1.0)*(ix + iy) - floor((((ix + iy)*34.0)+1.0)*(ix + iy) * (1.0 / 289.0)) * 289.0;
	vec4 ixy0 = (((ixy + iz0) * 34.0)+1.0)* (ixy + iz0) - floor((( (ixy + iz0) *34.0)+1.0)* (ixy + iz0) * (1.0 / 289.0)) * 289.0;
	vec4 ixy1 = (((ixy + iz1)*34.0)+1.0)*(ixy + iz1) - floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1) * (1.0 / 289.0)) * 289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}
float perlingFbmFireFXTempFunc(vec2 _pos, float _octaves, float _intencity, float persistence, float _scale, float _time) {
	float final = 0.0;
	float amplitude = _intencity;
	for(float i = 0.0; i < _octaves; i++){
		final += cnoiseFireFXTempFunc(vec3(_pos * _scale, _time)) * amplitude;
		_scale *= 2.0;
		amplitude *= persistence;
	}
	return (min(final, 1.0) + 1.0) * 0.5;
}
vec4 fireFXFunc(vec2 _uv_fire, vec2 _dir_fire, float _speed_fire, float _time_fire,
	vec4 _col1_fire, vec4 _col2_fire, vec4 _col3_fire,
	float _col1_pos, float _col2_pos, float _col3_pos){
	float _x_pos = mix(0.0, 1.0, _uv_fire.y);
	_uv_fire.x -= _dir_fire.x * _time_fire * _speed_fire;
	_uv_fire.y += _dir_fire.y * _time_fire * _speed_fire;
	float _y_pos = perlingFbmFireFXTempFunc(_uv_fire, 8.0, 0.4, 1.0, 1.0, 1.0);
	float _1 = step(_y_pos, _x_pos - _col1_pos);
	float _3 = step(_y_pos, _x_pos - _col3_pos);
	float L1 = _1 - _3;
	vec4 col = vec4(1.0);
	col = mix(_col1_fire, _col3_fire, L1);
	
	float _2 = step(_y_pos, _x_pos - _col2_pos);
	float L2 = _3 - _2;
	col.rgb = mix(col.rgb, _col2_fire.rgb, L2);
	col = mix(vec4(0.0), col, _1);
	return col;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Gradient4Corners:2
	vec3 n_in2p1 = vec3(1.00000, 1.00000, 1.00000);
	float n_in2p2 = 1.00000;
	vec3 n_in2p3 = vec3(1.00000, 1.00000, 1.00000);
	float n_in2p4 = 1.00000;
	vec3 n_in2p5 = vec3(1.00000, 1.00000, 1.00000);
	float n_in2p6 = 1.00000;
	vec3 n_in2p7 = vec3(1.00000, 1.00000, 1.00000);
	float n_in2p8 = 1.00000;
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_out2p0n_out2p1 = gradient4cornersFunc(n_out3p0.xy, vec4(n_in2p1, n_in2p2), vec4(n_in2p3, n_in2p4), vec4(n_in2p5, n_in2p6), vec4(n_in2p7, n_in2p8));
		n_out2p0 = n_out2p0n_out2p1.rgb;
		n_out2p1 = n_out2p0n_out2p1.a;
	}

// ColorUniform:10
	vec3 n_out10p0 = NoiseColor.rgb;
	float n_out10p1 = NoiseColor.a;

// VectorOp:9
	vec3 n_in9p0 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out9p0 = n_in9p0 * n_out10p0;

// ScalarMix:6
	float n_out6p0 = mix(dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)), dot(n_out9p0, vec3(0.333333, 0.333333, 0.333333)), n_out2p1);

// ScalarUniform:15
	float n_out15p0 = Speed;

// ScalarOp:14
	float n_in14p0 = 1.00000;
	float n_out14p0 = n_in14p0 / n_out15p0;

// ColorUniform:16
	vec3 n_out16p0 = FireColor1.rgb;
	float n_out16p1 = FireColor1.a;

// ColorUniform:17
	vec3 n_out17p0 = FireColor2.rgb;
	float n_out17p1 = FireColor2.a;

// Input:5
	float n_out5p0 = TIME;

// ScalarOp:7
	float n_out7p0 = n_out5p0 * n_out14p0;

// FireFX:13
	vec3 n_in13p1 = vec3(0.00000, 1.00000, 0.00000);
	float n_in13p9 = 0.00000;
	float n_in13p10 = 0.40000;
	float n_in13p11 = 0.20000;
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 n_out13p0n_out13p1 = fireFXFunc(n_out3p0.xy, n_in13p1.xy, n_out14p0, n_out7p0, vec4(n_out16p0, n_out17p1), vec4(n_out17p0, n_out16p1), vec4(n_out16p0, n_out16p1), n_in13p9, n_in13p10, n_in13p11);
		n_out13p0 = n_out13p0n_out13p1.rgb;
		n_out13p1 = n_out13p0n_out13p1.a;
	}

// ScalarUniform:11
	float n_out11p0 = FireCoeff;

// ScalarMix:12
	float n_out12p0 = mix(n_out6p0, dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333)), n_out11p0);

// Output:0
	COLOR.rgb = vec3(n_out12p0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -210, 146 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1080, 60 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 460, 60 )
nodes/fragment/3/node = SubResource( 4 )
nodes/fragment/3/position = Vector2( 60, 60 )
nodes/fragment/5/node = SubResource( 6 )
nodes/fragment/5/position = Vector2( 60, 140 )
nodes/fragment/6/node = SubResource( 7 )
nodes/fragment/6/position = Vector2( 820, 60 )
nodes/fragment/7/node = SubResource( 8 )
nodes/fragment/7/position = Vector2( 60, 220 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( 660, 340 )
nodes/fragment/10/node = SubResource( 2 )
nodes/fragment/10/position = Vector2( 60, 340 )
nodes/fragment/11/node = SubResource( 12 )
nodes/fragment/11/position = Vector2( 60, -20 )
nodes/fragment/12/node = SubResource( 13 )
nodes/fragment/12/position = Vector2( 820, -60 )
nodes/fragment/13/node = SubResource( 14 )
nodes/fragment/13/position = Vector2( 520, -360 )
nodes/fragment/14/node = SubResource( 15 )
nodes/fragment/14/position = Vector2( 40, -160 )
nodes/fragment/15/node = SubResource( 16 )
nodes/fragment/15/position = Vector2( 40, -240 )
nodes/fragment/16/node = SubResource( 17 )
nodes/fragment/16/position = Vector2( 40, -360 )
nodes/fragment/17/node = SubResource( 18 )
nodes/fragment/17/position = Vector2( 220, -360 )
nodes/fragment/18/node = SubResource( 19 )
nodes/fragment/18/position = Vector2( 400, 340 )
nodes/fragment/19/node = SubResource( 20 )
nodes/fragment/19/position = Vector2( 896, 376 )
nodes/fragment/connections = PoolIntArray( 2, 0, 6, 0, 3, 0, 2, 0, 5, 0, 7, 0, 2, 1, 6, 2, 9, 0, 6, 1, 10, 0, 9, 1, 6, 0, 12, 0, 11, 0, 12, 2, 12, 0, 0, 0, 3, 0, 13, 0, 13, 0, 12, 1, 15, 0, 14, 1, 14, 0, 13, 2, 14, 0, 7, 1, 16, 0, 13, 3, 17, 0, 13, 5, 7, 0, 13, 12, 3, 0, 18, 0, 17, 1, 13, 4, 16, 1, 13, 6, 16, 0, 13, 7, 16, 1, 13, 8 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/NoiseColor = Color( 0, 0.45098, 0.607843, 1 )
shader_param/Speed = 8.0
shader_param/FireColor1 = Color( 0.870588, 0.572549, 0, 1 )
shader_param/FireColor2 = Color( 0.929412, 0.305882, 0, 1 )
shader_param/FireCoeff = 0.25

[sub_resource type="DynamicFont" id=1]
size = 24
font_data = ExtResource( 2 )

[node name="ClassicGameHUD" type="Panel"]
material = SubResource( 11 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="InventoryDropzone" parent="." instance=ExtResource( 1 )]
anchor_right = 0.0
margin_left = 7.0
margin_top = 72.0
margin_right = 439.0
margin_bottom = -4.0

[node name="InventoryLabel" type="Label" parent="InventoryDropzone"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -6.0
margin_right = 505.0
margin_bottom = 30.0
rect_rotation = -90.0
custom_fonts/font = SubResource( 1 )
custom_colors/font_color = Color( 0, 0, 0, 0.196078 )
text = "Inventory"
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MixerDropzone" parent="." instance=ExtResource( 1 )]
anchor_right = 0.0
margin_left = 448.0
margin_top = 72.0
margin_right = 880.0
margin_bottom = -344.0

[node name="MixerLabel" type="Label" parent="MixerDropzone"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -6.0
margin_right = 178.0
margin_bottom = 30.0
rect_rotation = -90.0
custom_fonts/font = SubResource( 1 )
custom_colors/font_color = Color( 0, 0, 0, 0.196078 )
text = "Mixer"
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ResultElemSquare" parent="MixerDropzone" instance=ExtResource( 3 )]
margin_left = 368.0
margin_top = 120.0
margin_right = 418.0
margin_bottom = 170.0

[node name="InverterDropzone" parent="." instance=ExtResource( 1 )]
anchor_right = 0.0
margin_left = 448.0
margin_top = 264.0
margin_right = 880.0
margin_bottom = -240.0

[node name="InverterLabel" type="Label" parent="InverterDropzone"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_top = -6.0
margin_right = 178.0
margin_bottom = 30.0
rect_rotation = -90.0
custom_fonts/font = SubResource( 1 )
custom_colors/font_color = Color( 0, 0, 0, 0.196078 )
text = "Inverter"
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="InputElemSquare" parent="InverterDropzone" instance=ExtResource( 3 )]
margin_left = 120.0
margin_top = 24.0
margin_right = 170.0
margin_bottom = 74.0

[node name="ResultElemSquare2" parent="InverterDropzone" instance=ExtResource( 3 )]
margin_left = 288.0
margin_top = 24.0
margin_right = 338.0
margin_bottom = 74.0

[node name="NinePatchRect" type="NinePatchRect" parent="InverterDropzone"]
margin_left = 184.0
margin_top = 40.0
margin_right = 272.0
margin_bottom = 57.0
texture = ExtResource( 4 )
patch_margin_top = 4
patch_margin_right = 11
patch_margin_bottom = 4
__meta__ = {
"_edit_use_anchors_": false
}

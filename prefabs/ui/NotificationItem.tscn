[gd_scene load_steps=15 format=2]

[ext_resource path="res://fonts/saira/SairaExtraCondensed-Regular.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://fonts/saira/SairaExtraCondensed-Bold.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://addons/shaderV/rgba/inverseColor.gd" type="Script" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Panel

export var title: String setget set_title, get_title
export var subtitle: String setget set_subtitle, get_subtitle
export var icon: Texture setget set_notification_icon, get_notification_icon

func animate(delta):
	var tpos = Vector2(rect_global_position.x, rect_global_position.y + (rect_size.y + 2) * delta)
	var tw = Globals.get_scene_tween()
	if tw != null:
		tw.interpolate_property(self, \"rect_global_position\", \\
			tpos + Vector2(rect_size.x, 0), tpos, 0.8, Tween.TRANS_BACK, Tween.EASE_IN_OUT)

func set_title(title: String):
	$Title.text = title

func get_title() -> String:
	return $Title.text

func set_subtitle(subtitle: String):
	$Subtitle.text = subtitle

func get_subtitle() -> String:
	return $Subtitle.text

func set_notification_icon(icon: Texture):
	$Icon.material.set_shader_param(\"Icon\", icon)

func get_notification_icon() -> Texture:
	return $Icon.material.get_shader_param(\"Icon\") as Texture

func _on_timer_timeout():
	queue_free()
"

[sub_resource type="DynamicFont" id=2]
size = 18
use_mipmaps = true
use_filter = true
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=3]
size = 18
use_mipmaps = true
use_filter = true
extra_spacing_top = -6
extra_spacing_bottom = -7
font_data = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=5]
default_input_values = [ 2, 1.0 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
uniform_name = "Icon"

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;
render_mode blend_disabled;

uniform sampler2D Icon;


// InverseColor

vec3 inverseC0l0rFunc(vec3 _c0l0r_to_inverse, float _inverse_c0l0r_intensity){
	return mix(_c0l0r_to_inverse.rgb, 1.0 - _c0l0r_to_inverse.rgb, _inverse_c0l0r_intensity);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0 = vec3(UV, 0.0);

// TextureUniform:7
	vec3 n_out7p0;
	float n_out7p1;
	{
		vec4 n_tex_read = texture(Icon, n_out4p0.xy);
		n_out7p0 = n_tex_read.rgb;
		n_out7p1 = n_tex_read.a;
	}

// InverseColor:5
	float n_in5p2 = 1.00000;
	vec3 n_out5p0;
	float n_out5p1;
	{
		n_out5p0 = inverseC0l0rFunc(n_out7p0, n_in5p2);
		n_out5p1 = n_out7p1;
	}

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -380, 27 )
mode = 1
modes/blend = 5
flags/light_only = false
nodes/fragment/0/position = Vector2( 580, 140 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -200, 180 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 360, 80 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 40, 80 )
nodes/fragment/connections = PoolIntArray( 5, 0, 0, 0, 5, 1, 0, 1, 4, 0, 7, 0, 7, 0, 5, 0, 7, 1, 5, 1 )

[sub_resource type="Gradient" id=8]
offsets = PoolRealArray( 0 )
colors = PoolColorArray( 0, 0, 0, 0 )

[sub_resource type="GradientTexture" id=9]
gradient = SubResource( 8 )

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 7 )
shader_param/Icon = SubResource( 9 )

[sub_resource type="ProxyTexture" id=11]

[node name="NotifyPanel" type="Panel"]
margin_right = 448.0
margin_bottom = 64.0
rect_min_size = Vector2( 400, 64 )
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Title" type="Label" parent="."]
anchor_right = 1.0
margin_left = 64.0
margin_bottom = 37.0
custom_fonts/font = SubResource( 2 )
valign = 1
clip_text = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Subtitle" type="Label" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 72.0
margin_top = 37.0
custom_fonts/font = SubResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Icon" type="TextureRect" parent="."]
material = SubResource( 10 )
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 8.0
margin_right = 56.0
margin_bottom = -8.0
texture = SubResource( 11 )
expand = true
stretch_mode = 6
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Timer" type="Timer" parent="."]
wait_time = 5.0
one_shot = true
autostart = true
[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]

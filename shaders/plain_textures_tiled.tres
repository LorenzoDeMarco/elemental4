[gd_resource type="VisualShader" load_steps=11 format=2]

[ext_resource path="res://addons/shaderV/uv/tileUV.gd" type="Script" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeTextureUniform" id=2]
uniform_name = "Normalmap"
texture_type = 2

[sub_resource type="VisualShaderNodeCustom" id=3]
default_input_values = [ 1, 2.0, 2, 2.0, 3, 0.0 ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "Vframes"

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "Hframes"

[sub_resource type="VisualShaderNodeTextureUniform" id=6]
uniform_name = "Albedo"
color_default = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=7]
uniform_name = "Frame"

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "Normal"
color_default = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "NormalDepth"

[resource]
code = "shader_type canvas_item;
uniform float Vframes;
uniform float Hframes;
uniform float Frame;
uniform sampler2D Albedo : hint_black;
uniform sampler2D Normal : hint_black;
uniform sampler2D Normalmap : hint_normal;
uniform float NormalDepth;


// TileUV

vec2 t1leMapUV(vec2 _uv_t1le_t1mp, float _w1dth_t1mp, float _he1ght_t1mp, float _t1le_nmbr_t1mp){
	_t1le_nmbr_t1mp = min(max(floor(_t1le_nmbr_t1mp), 0.0), _w1dth_t1mp * _he1ght_t1mp - 1.0);
	vec2 tcrcp = vec2(1.0) / vec2(_w1dth_t1mp, _he1ght_t1mp);
	float ty =floor(_t1le_nmbr_t1mp * tcrcp.x);
	float tx = _t1le_nmbr_t1mp - _w1dth_t1mp * ty;
	return (_uv_t1le_t1mp + vec2(tx, ty)) * tcrcp;
}


void vertex() {
// Output:0

}

void fragment() {
// Input:15
	vec3 n_out15p0 = vec3(UV, 0.0);

// ScalarUniform:18
	float n_out18p0 = Vframes;

// ScalarUniform:19
	float n_out19p0 = Hframes;

// ScalarUniform:20
	float n_out20p0 = Frame;

// TileUV:17
	vec3 n_out17p0;
	{
		n_out17p0.xy = t1leMapUV(n_out15p0.xy, n_out18p0, n_out19p0, n_out20p0);
	}

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture(Albedo, n_out17p0.xy);
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// TextureUniform:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 n_tex_read = texture(Normal, n_out17p0.xy);
		n_out4p0 = n_tex_read.rgb;
		n_out4p1 = n_tex_read.a;
	}

// TextureUniform:16
	vec3 n_out16p0;
	float n_out16p1;
	{
		vec4 n_tex_read = texture(Normalmap, n_out17p0.xy);
		n_out16p0 = n_tex_read.rgb;
		n_out16p1 = n_tex_read.a;
	}

// ScalarUniform:7
	float n_out7p0 = NormalDepth;

// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out2p1;
	NORMAL = n_out4p0;
	NORMALMAP = n_out16p0;
	NORMALMAP_DEPTH = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -50.9812, -127 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 880, 40 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( 160, 60 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( 160, 260 )
nodes/fragment/7/node = SubResource( 9 )
nodes/fragment/7/position = Vector2( 160, -20 )
nodes/fragment/15/node = SubResource( 1 )
nodes/fragment/15/position = Vector2( 0, 120 )
nodes/fragment/16/node = SubResource( 2 )
nodes/fragment/16/position = Vector2( 560, 180 )
nodes/fragment/17/node = SubResource( 3 )
nodes/fragment/17/position = Vector2( 380, -20 )
nodes/fragment/18/node = SubResource( 4 )
nodes/fragment/18/position = Vector2( 380, -80 )
nodes/fragment/19/node = SubResource( 5 )
nodes/fragment/19/position = Vector2( 560, -80 )
nodes/fragment/20/node = SubResource( 7 )
nodes/fragment/20/position = Vector2( 740, -80 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 2, 1, 0, 1, 4, 0, 0, 2, 16, 0, 0, 3, 17, 0, 2, 0, 15, 0, 17, 0, 17, 0, 4, 0, 17, 0, 16, 0, 7, 0, 0, 4, 18, 0, 17, 1, 19, 0, 17, 2, 20, 0, 17, 3 )
